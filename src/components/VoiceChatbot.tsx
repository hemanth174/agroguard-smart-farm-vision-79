
import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { MessageCircle, X, Mic, MicOff, Send, Volume2, VolumeX, Bot, User } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  language: string;
  isVoice?: boolean;
}

interface Language {
  code: string;
  name: string;
  flag: string;
  speechLang: string;
}

const VoiceChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [speakerMuted, setSpeakerMuted] = useState(false);
  const [audioWave, setAudioWave] = useState(0);
  
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const waveIntervalRef = useRef<NodeJS.Timeout | null>(null);

  const languages: Language[] = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏', speechLang: 'en-US' },
    { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥', speechLang: 'hi-IN' },
    { code: 'te', name: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥', speechLang: 'te-IN' },
    { code: 'mr', name: '‡§Æ‡§∞‡§æ‡§†‡•Ä', flag: 'üáÆüá≥', speechLang: 'mr-IN' },
    { code: 'gu', name: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä', flag: 'üáÆüá≥', speechLang: 'gu-IN' },
    { code: 'ta', name: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç', flag: 'üáÆüá≥', speechLang: 'ta-IN' },
    { code: 'kn', name: '‡≤ï‡≤®‡≥ç‡≤®‡≤°', flag: 'üáÆüá≥', speechLang: 'kn-IN' },
    { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥', speechLang: 'zh-CN' },
    { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏', speechLang: 'es-ES' }
  ];

  const currentLanguage = languages.find(lang => lang.code === selectedLanguage) || languages[0];

  // Initialize speech recognition
  useEffect(() => {
    if (typeof window !== 'undefined' && ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
      try {
        const SpeechRecognitionAPI = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
        recognitionRef.current = new SpeechRecognitionAPI();
        recognitionRef.current.continuous = false;
        recognitionRef.current.interimResults = false;
        recognitionRef.current.lang = currentLanguage.speechLang;

        recognitionRef.current.onresult = (event: any) => {
          const transcript = event.results[0][0].transcript;
          setInputMessage(transcript);
          setIsListening(false);
          stopAudioWave();
        };

        recognitionRef.current.onerror = () => {
          setIsListening(false);
          stopAudioWave();
        };

        recognitionRef.current.onend = () => {
          setIsListening(false);
          stopAudioWave();
        };
      } catch (error) {
        console.log('Speech recognition not available:', error);
      }
    }
  }, [currentLanguage.speechLang]);

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isTyping]);

  // Add greeting message when opened
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const greetings = {
        en: "Hello! I'm your voice-enabled farming assistant. You can speak or type your questions about agriculture, weather, crops, and more. How can I help you today?",
        hi: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•â‡§Ø‡§∏-‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡•É‡§∑‡§ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§ï‡•É‡§∑‡§ø, ‡§Æ‡•å‡§∏‡§Æ, ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤ ‡§Ø‡§æ ‡§≤‡§ø‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
        te: "‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç-‡∞é‡∞®‡±á‡∞¨‡±Å‡∞≤‡±ç‡∞°‡±ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡∞ø‡∞®‡∞ø‡•§ ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø‡∞Ç, ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç, ‡∞™‡∞Ç‡∞ü‡∞≤ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞µ‡∞ö‡±ç‡∞ö‡±Å ‡∞≤‡±á‡∞¶‡∞æ ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å. ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?",
        mr: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§Ü‡§µ‡§æ‡§ú-‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§∂‡•á‡§§‡•Ä ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø‡§ï ‡§Ü‡§π‡•á. ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§∂‡•á‡§§‡•Ä, ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®, ‡§™‡§ø‡§ï‡§æ‡§Ç‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§¨‡•ã‡§≤‡•Ç ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ. ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§ï‡§∂‡•Ä ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã?",
        gu: "‡™®‡™Æ‡™∏‡´ç‡™§‡´á! ‡™π‡´Å‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´ã ‡™µ‡´â‡™á‡™∏-‡™∏‡™ï‡´ç‡™∑‡™Æ ‡™ï‡´É‡™∑‡™ø ‡™∏‡™π‡™æ‡™Ø‡™ï ‡™õ‡´Å‡™Ç. ‡™§‡™Æ‡´á ‡™ï‡´É‡™∑‡™ø, ‡™π‡™µ‡™æ‡™Æ‡™æ‡™®, ‡™™‡™æ‡™ï‡´ã ‡™µ‡™ø‡™∂‡´á ‡™¨‡´ã‡™≤‡´Ä ‡™Ö‡™•‡™µ‡™æ ‡™≤‡™ñ‡´Ä ‡™∂‡™ï‡´ã ‡™õ‡´ã. ‡™π‡´Å‡™Ç ‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™ï‡´á‡™µ‡´Ä ‡™∞‡´Ä‡™§‡´á ‡™Æ‡™¶‡™¶ ‡™ï‡™∞‡´Ä ‡™∂‡™ï‡´Å‡™Ç?",
        ta: "‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡ØÅ‡Æ∞‡Æ≤‡Øç-‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡ÆÆ‡Øç, ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà, ‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æ™‡Øá‡Æö‡Æ≤‡Ææ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ§‡Æü‡Øç‡Æü‡Æö‡Øç‡Æö‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ≤‡Ææ‡ÆÆ‡Øç. ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç?",
        kn: "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø-‡≤∏‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø ‡≤ï‡≥É‡≤∑‡≤ø ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï. ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤ï‡≥É‡≤∑‡≤ø, ‡≤π‡≤µ‡≤æ‡≤Æ‡≤æ‡≤®, ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤ó‡≤≥ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤ü‡≥à‡≤™‡≥ç ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å. ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?",
        zh: "ÊÇ®Â•ΩÔºÅÊàëÊòØÊÇ®ÁöÑËØ≠Èü≥ÂÜú‰∏öÂä©Êâã„ÄÇÊÇ®ÂèØ‰ª•ËØ¥ËØùÊàñËæìÂÖ•ÂÖ≥‰∫éÂÜú‰∏ö„ÄÅÂ§©Ê∞î„ÄÅ‰ΩúÁâ©ÁöÑÈóÆÈ¢ò„ÄÇÊàëÂ¶Ç‰Ωï‰∏∫ÊÇ®Êèê‰æõÂ∏ÆÂä©Ôºü",
        es: "¬°Hola! Soy tu asistente agr√≠cola habilitado por voz. Puedes hablar o escribir sobre agricultura, clima, cultivos. ¬øC√≥mo puedo ayudarte hoy?"
      };

      addBotMessage(greetings[selectedLanguage] || greetings.en);
    }
  }, [isOpen, selectedLanguage]);

  const startAudioWave = () => {
    waveIntervalRef.current = setInterval(() => {
      setAudioWave(prev => (prev + 1) % 4);
    }, 200);
  };

  const stopAudioWave = () => {
    if (waveIntervalRef.current) {
      clearInterval(waveIntervalRef.current);
      waveIntervalRef.current = null;
    }
    setAudioWave(0);
  };

  const addBotMessage = useCallback((text: string) => {
    const newMessage: Message = {
      id: `bot-${Date.now()}`,
      text,
      sender: 'bot',
      timestamp: new Date(),
      language: selectedLanguage
    };
    setMessages(prev => [...prev, newMessage]);
  }, [selectedLanguage]);

  const addUserMessage = useCallback((text: string, isVoice = false) => {
    const newMessage: Message = {
      id: `user-${Date.now()}`,
      text,
      sender: 'user',
      timestamp: new Date(),
      language: selectedLanguage,
      isVoice
    };
    setMessages(prev => [...prev, newMessage]);
  }, [selectedLanguage]);

  const generateBotResponse = useCallback((userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    const responses = {
      en: {
        weather: "Current weather conditions are ideal for farming. Temperature: 28¬∞C, Humidity: 65%, Light winds. Perfect for most agricultural activities. Would you like specific crop recommendations for this weather?",
        crops: "For the current season, I recommend: Rice (high demand), Cotton (good prices), Wheat (stable market), Sugarcane (profitable). Each has specific soil and climate requirements. Which crop interests you most?",
        irrigation: "Smart irrigation tips: Water early morning (5-7 AM) or evening (6-8 PM). Check soil moisture 2-3 inches deep. Drip irrigation saves 30-50% water. Your current soil moisture looks optimal!",
        price: "Current market prices: Rice ‚Çπ2,450/quintal (+‚Çπ50), Wheat ‚Çπ2,100/quintal, Cotton ‚Çπ5,800/quintal (+‚Çπ100). Prices are trending upward. Good time to sell rice and cotton!",
        fertilizer: "Based on soil analysis: Use NPK 19:19:19 for balanced nutrition. Apply organic compost for soil health. Current soil pH is good. Apply fertilizers during cool hours for better absorption.",
        pest: "Common pest control: Use neem oil spray (5ml/liter) for general pests. Yellow sticky traps for aphids. Crop rotation prevents soil-borne pests. Upload plant photos for specific disease identification.",
        default: "I'm here to help with farming questions! I can assist with weather forecasts, crop recommendations, irrigation advice, market prices, pest control, and much more. What specific farming topic interests you?"
      },
      hi: {
        weather: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•å‡§∏‡§Æ ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§¶‡§∞‡•ç‡§∂ ‡§π‡•à‡•§ ‡§§‡§æ‡§™‡§Æ‡§æ‡§®: 28¬∞C, ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ: 65%, ‡§π‡§≤‡•ç‡§ï‡•Ä ‡§π‡§µ‡§æ‡•§ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§Ç‡§∂ ‡§ï‡•É‡§∑‡§ø ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§§‡§Æ‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§ö‡§æ‡§π‡§ø‡§è?",
        crops: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ: ‡§ß‡§æ‡§® (‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§Æ‡§æ‡§Ç‡§ó), ‡§ï‡§™‡§æ‡§∏ (‡§Ö‡§ö‡•ç‡§õ‡•á ‡§≠‡§æ‡§µ), ‡§ó‡•á‡§π‡•Ç‡§Ç (‡§∏‡•ç‡§•‡§ø‡§∞ ‡§¨‡§æ‡§ú‡§æ‡§∞), ‡§ó‡§®‡•ç‡§®‡§æ (‡§≤‡§æ‡§≠‡§ï‡§æ‡§∞‡•Ä)‡•§ ‡§π‡§∞ ‡§´‡§∏‡§≤ ‡§ï‡•Ä ‡§Ö‡§™‡§®‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§è‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§´‡§∏‡§≤ ‡§Æ‡•á‡§Ç ‡§∞‡•Å‡§ö‡§ø ‡§π‡•à?",
        irrigation: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§§‡§ï‡§®‡•Ä‡§ï: ‡§∏‡•Å‡§¨‡§π (5-7 ‡§¨‡§ú‡•á) ‡§Ø‡§æ ‡§∂‡§æ‡§Æ (6-8 ‡§¨‡§ú‡•á) ‡§™‡§æ‡§®‡•Ä ‡§¶‡•á‡§Ç‡•§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä 2-3 ‡§á‡§Ç‡§ö ‡§ó‡§π‡§∞‡§æ‡§à ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§ ‡§°‡•ç‡§∞‡§ø‡§™ ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à 30-50% ‡§™‡§æ‡§®‡•Ä ‡§¨‡§ö‡§æ‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§Æ‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§≤‡§ó ‡§∞‡§π‡•Ä ‡§π‡•à!",
        price: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ: ‡§ß‡§æ‡§® ‚Çπ2,450/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤ (+‚Çπ50), ‡§ó‡•á‡§π‡•Ç‡§Ç ‚Çπ2,100/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤, ‡§ï‡§™‡§æ‡§∏ ‚Çπ5,800/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤ (+‚Çπ100)‡•§ ‡§≠‡§æ‡§µ ‡§¨‡§¢‡§º ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§ß‡§æ‡§® ‡§î‡§∞ ‡§ï‡§™‡§æ‡§∏ ‡§¨‡•á‡§ö‡§®‡•á ‡§ï‡§æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø!",
        fertilizer: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞: ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§™‡•ã‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è NPK 19:19:19 ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§æ‡§¶‡•§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ pH ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à‡•§ ‡§¨‡•á‡§π‡§§‡§∞ ‡§Ö‡§µ‡§∂‡•ã‡§∑‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§†‡§Ç‡§°‡•á ‡§∏‡§Æ‡§Ø ‡§Æ‡•á‡§Ç ‡§â‡§∞‡•ç‡§µ‡§∞‡§ï ‡§°‡§æ‡§≤‡•á‡§Ç‡•§",
        pest: "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£: ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§Æ ‡§§‡•á‡§≤ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á (5ml/‡§≤‡•Ä‡§ü‡§∞)‡•§ ‡§Æ‡§æ‡§π‡•Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•Ä‡§≤‡•á ‡§ö‡§ø‡§™‡§ö‡§ø‡§™‡•á ‡§ú‡§æ‡§≤‡•§ ‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∞‡•ã‡§ó ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•å‡§ß‡•á ‡§ï‡•Ä ‡§´‡•ã‡§ü‡•ã ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§",
        default: "‡§Æ‡•à‡§Ç ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§∏‡§µ‡§æ‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç! ‡§Æ‡•à‡§Ç ‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®, ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ, ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§∏‡§≤‡§æ‡§π, ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ, ‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•å‡§® ‡§∏‡§æ ‡§ï‡•É‡§∑‡§ø ‡§µ‡§ø‡§∑‡§Ø ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§π‡•à?"
      },
      te: {
        weather: "‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞™‡∞∞‡∞ø‡∞∏‡±ç‡∞•‡∞ø‡∞§‡±Å‡∞≤‡±Å ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Ö‡∞®‡±Å‡∞ï‡±Ç‡∞≤‡∞Ç‡∞ó‡∞æ ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø‡•§ ‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§: 28¬∞C, ‡∞§‡±á‡∞Æ: 65%, ‡∞§‡±á‡∞≤‡∞ø‡∞ï‡∞™‡∞æ‡∞ü‡∞ø ‡∞ó‡∞æ‡∞≤‡±Å‡∞≤‡±Å‡•§ ‡∞ö‡∞æ‡∞≤‡∞æ ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞ï‡∞≤‡∞æ‡∞™‡∞æ‡∞≤‡∞ï‡±Å ‡∞Ö‡∞¶‡±ç‡∞≠‡±Å‡∞§‡∞Ç. ‡∞à ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞æ?",
        crops: "‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞∏‡±Ä‡∞ú‡∞®‡±ç‚Äå‡∞ï‡±Å ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å: ‡∞µ‡∞∞‡∞ø (‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞°‡∞ø‡∞Æ‡∞æ‡∞Ç‡∞°‡±ç), ‡∞™‡∞§‡±ç‡∞§‡∞ø (‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞ß‡∞∞‡∞≤‡±Å), ‡∞ó‡±ã‡∞ß‡±Å‡∞Æ (‡∞∏‡±ç‡∞•‡∞ø‡∞∞‡∞Æ‡±à‡∞® ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç), ‡∞ö‡±Ü‡∞∞‡∞ï‡±Å (‡∞≤‡∞æ‡∞≠‡∞¶‡∞æ‡∞Ø‡∞ï‡∞Ç). ‡∞™‡±ç‡∞∞‡∞§‡∞ø ‡∞™‡∞Ç‡∞ü‡∞ï‡±Å ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞æ‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø. ‡∞è ‡∞™‡∞Ç‡∞ü ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞Ü‡∞∏‡∞ï‡±ç‡∞§‡∞ø‡∞ï‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø?",
        irrigation: "‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤ ‡∞ö‡∞ø‡∞ü‡±ç‡∞ï‡∞æ‡∞≤‡±Å: ‡∞â‡∞¶‡∞Ø‡∞Ç (5-7 ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å) ‡∞≤‡±á‡∞¶‡∞æ ‡∞∏‡∞æ‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞Ç (6-8 ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å) ‡∞®‡±Ä‡∞∞‡±Å ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡∞Ç‡∞°‡∞ø. ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞§‡±á‡∞Æ‡∞®‡±Å 2-3 ‡∞Ö‡∞Ç‡∞ó‡±Å‡∞≥‡∞æ‡∞≤ ‡∞≤‡±ã‡∞§‡±Å‡∞≤‡±ã ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞°‡±ç‡∞∞‡∞ø‡∞™‡±ç ‡∞á‡∞∞‡±ç‡∞∞‡∞ø‡∞ó‡±á‡∞∑‡∞®‡±ç 30-50% ‡∞®‡±Ä‡∞∞‡±Å ‡∞Ü‡∞¶‡∞æ ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞Æ‡±Ä ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞§‡±á‡∞Æ ‡∞Ö‡∞®‡±Å‡∞ï‡±Ç‡∞≤‡∞Ç‡∞ó‡∞æ ‡∞ï‡∞®‡∞ø‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø!",
        price: "‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞ß‡∞∞‡∞≤‡±Å: ‡∞µ‡∞∞‡∞ø ‚Çπ2,450/‡∞ï‡±ç‡∞µ‡∞ø‡∞Ç‡∞ü‡∞≤‡±ç (+‚Çπ50), ‡∞ó‡±ã‡∞ß‡±Å‡∞Æ ‚Çπ2,100/‡∞ï‡±ç‡∞µ‡∞ø‡∞Ç‡∞ü‡∞≤‡±ç, ‡∞™‡∞§‡±ç‡∞§‡∞ø ‚Çπ5,800/‡∞ï‡±ç‡∞µ‡∞ø‡∞Ç‡∞ü‡∞≤‡±ç (+‚Çπ100). ‡∞ß‡∞∞‡∞≤‡±Å ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø. ‡∞µ‡∞∞‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞§‡±ç‡∞§‡∞ø ‡∞Ö‡∞Æ‡±ç‡∞Æ‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞∏‡∞Æ‡∞Ø‡∞Ç!",
        fertilizer: "‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£ ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞Ç‡∞ó‡∞æ: ‡∞∏‡∞Æ‡∞§‡±Å‡∞≤‡±ç‡∞Ø ‡∞™‡±ã‡∞∑‡∞£ ‡∞ï‡±ã‡∞∏‡∞Ç NPK 19:19:19 ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø. ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞∏‡±á‡∞Ç‡∞¶‡±ç‡∞∞‡±Ä‡∞Ø ‡∞ï‡∞Ç‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±ç ‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø pH ‡∞Æ‡∞Ç‡∞ö‡∞ø‡∞¶‡∞ø. ‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞∂‡±ã‡∞∑‡∞£ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞ö‡∞≤‡±ç‡∞≤‡∞®‡∞ø ‡∞∏‡∞Æ‡∞Ø‡∞æ‡∞≤‡±ç‡∞≤‡±ã ‡∞é‡∞∞‡±Å‡∞µ‡±Å‡∞≤‡±Å ‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        pest: "‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞ï‡±Ä‡∞ü‡∞ï ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞£: ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞ï‡±Ä‡∞ü‡∞ï‡∞æ‡∞≤‡∞ï‡±Å ‡∞µ‡±á‡∞™ ‡∞®‡±Ç‡∞®‡±Ü ‡∞∏‡±ç‡∞™‡±ç‡∞∞‡±á (5ml/‡∞≤‡±Ä‡∞ü‡∞∞‡±ç). ‡∞Ö‡∞´‡∞ø‡∞°‡±ç‡∞∏‡±ç‚Äå‡∞ï‡±Å ‡∞™‡∞∏‡±Å‡∞™‡±Å ‡∞Ö‡∞Ç‡∞ü‡±Å‡∞ï‡±Å‡∞®‡±á ‡∞ü‡±ç‡∞∞‡∞æ‡∞™‡±ç‚Äå‡∞≤‡±Å. ‡∞™‡∞Ç‡∞ü ‡∞Æ‡∞æ‡∞∞‡±ç‡∞™‡∞ø‡∞°‡∞ø ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø‡∞≤‡±ã‡∞®‡∞ø ‡∞ï‡±Ä‡∞ü‡∞ï‡∞æ‡∞≤‡∞®‡±Å ‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Æ‡±ä‡∞ï‡±ç‡∞ï ‡∞´‡±ã‡∞ü‡±ã‡∞≤‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
        default: "‡∞®‡±á‡∞®‡±Å ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡∞§‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å! ‡∞®‡±á‡∞®‡±Å ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ‡∞≤‡±Å, ‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å, ‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤ ‡∞∏‡∞≤‡∞π‡∞æ, ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞ß‡∞∞‡∞≤‡±Å, ‡∞ï‡±Ä‡∞ü‡∞ï ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞£‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å. ‡∞è ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞Ö‡∞Ç‡∞∂‡∞Ç ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞Ü‡∞∏‡∞ï‡±ç‡∞§‡∞ø‡∞ï‡∞∞‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞ø?"
      }
    };

    const currentResponses = responses[selectedLanguage] || responses.en;

    if (lowerMessage.includes('weather') || lowerMessage.includes('‡§Æ‡•å‡§∏‡§Æ') || lowerMessage.includes('‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç')) {
      return currentResponses.weather;
    }
    if (lowerMessage.includes('crop') || lowerMessage.includes('‡§´‡§∏‡§≤') || lowerMessage.includes('‡∞™‡∞Ç‡∞ü')) {
      return currentResponses.crops;
    }
    if (lowerMessage.includes('water') || lowerMessage.includes('irrigation') || lowerMessage.includes('‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à') || lowerMessage.includes('‡∞®‡±Ä‡∞ü‡∞ø‡∞™‡∞æ‡∞∞‡±Å‡∞¶‡∞≤')) {
      return currentResponses.irrigation;
    }
    if (lowerMessage.includes('price') || lowerMessage.includes('market') || lowerMessage.includes('‡§≠‡§æ‡§µ') || lowerMessage.includes('‡∞ß‡∞∞')) {
      return currentResponses.price;
    }
    if (lowerMessage.includes('fertilizer') || lowerMessage.includes('‡§â‡§∞‡•ç‡§µ‡§∞‡§ï') || lowerMessage.includes('‡∞é‡∞∞‡±Å‡∞µ‡±Å')) {
      return currentResponses.fertilizer;
    }
    if (lowerMessage.includes('pest') || lowerMessage.includes('disease') || lowerMessage.includes('‡§ï‡•Ä‡§ü') || lowerMessage.includes('‡∞ï‡±Ä‡∞ü‡∞ï')) {
      return currentResponses.pest;
    }

    return currentResponses.default;
  }, [selectedLanguage]);

  const speakText = useCallback((text: string) => {
    if (speakerMuted || !('speechSynthesis' in window)) return;

    setIsSpeaking(true);
    
    try {
      // Cancel any ongoing speech
      speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = currentLanguage.speechLang;
      utterance.rate = 0.9;
      utterance.volume = 0.8;
      
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);
      
      speechSynthesis.speak(utterance);
    } catch (error) {
      console.error('Speech synthesis error:', error);
      setIsSpeaking(false);
    }
  }, [speakerMuted, currentLanguage.speechLang]);

  const handleSendMessage = useCallback(async () => {
    if (!inputMessage.trim() || isTyping) return;

    const currentInput = inputMessage.trim();
    setInputMessage('');
    addUserMessage(currentInput);
    setIsTyping(true);

    // Simulate realistic typing delay
    setTimeout(() => {
      const response = generateBotResponse(currentInput);
      addBotMessage(response);
      setIsTyping(false);
      
      // Speak the response
      speakText(response);
    }, 1000 + Math.random() * 2000);
  }, [inputMessage, isTyping, addUserMessage, addBotMessage, generateBotResponse, speakText]);

  const startVoiceRecognition = useCallback(() => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true);
      startAudioWave();
      try {
        recognitionRef.current.lang = currentLanguage.speechLang;
        recognitionRef.current.start();
      } catch (error) {
        console.error('Voice recognition error:', error);
        setIsListening(false);
        stopAudioWave();
      }
    }
  }, [isListening, currentLanguage.speechLang]);

  const stopVoiceRecognition = useCallback(() => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
      setIsListening(false);
      stopAudioWave();
    }
  }, []);

  const handleKeyPress = useCallback((e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  }, [handleSendMessage]);

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 left-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="rounded-full w-16 h-16 shadow-lg bg-blue-600 hover:bg-blue-700 animate-pulse"
        >
          <MessageCircle className="h-6 w-6" />
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 left-6 z-50 w-96 h-[600px] flex flex-col">
      <Card className="shadow-xl h-full flex flex-col">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-3 flex-shrink-0 bg-blue-600 text-white rounded-t-lg">
          <div>
            <CardTitle className="text-white flex items-center gap-2">
              <Bot className="h-5 w-5" />
              Voice Assistant
            </CardTitle>
            <div className="flex items-center gap-2 mt-1">
              <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-100 text-xs">
                {currentLanguage.flag} {currentLanguage.name}
              </Badge>
              {isSpeaking && (
                <Badge className="bg-green-100 text-green-800 text-xs">
                  Speaking...
                </Badge>
              )}
            </div>
          </div>
          <div className="flex items-center gap-1">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setSpeakerMuted(!speakerMuted)}
              className="h-8 w-8 p-0 text-white hover:bg-blue-700"
              title={speakerMuted ? 'Unmute Speaker' : 'Mute Speaker'}
            >
              {speakerMuted ? <VolumeX className="h-4 w-4" /> : <Volume2 className="h-4 w-4" />}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="h-8 w-8 p-0 text-white hover:bg-blue-700"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        
        <CardContent className="flex-1 flex flex-col p-0 overflow-hidden">
          {/* Language Selector */}
          <div className="p-3 border-b bg-gray-50">
            <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select Language" />
              </SelectTrigger>
              <SelectContent>
                {languages.map((lang) => (
                  <SelectItem key={lang.code} value={lang.code}>
                    <span className="flex items-center gap-2">
                      <span>{lang.flag}</span>
                      <span>{lang.name}</span>
                    </span>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Messages Container */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4 max-h-[380px]">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex items-start gap-3 ${message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'}`}
              >
                <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                  message.sender === 'user' ? 'bg-blue-600' : 'bg-gray-200'
                }`}>
                  {message.sender === 'user' ? (
                    <User className="h-4 w-4 text-white" />
                  ) : (
                    <Bot className="h-4 w-4 text-gray-600" />
                  )}
                </div>
                <div
                  className={`max-w-[75%] p-3 rounded-lg text-sm leading-relaxed ${
                    message.sender === 'user'
                      ? 'bg-blue-600 text-white rounded-tr-none'
                      : 'bg-gray-100 text-gray-900 rounded-tl-none'
                  }`}
                >
                  {message.text}
                  {message.isVoice && (
                    <Mic className="h-3 w-3 inline ml-1 opacity-70" />
                  )}
                </div>
              </div>
            ))}
            
            {isTyping && (
              <div className="flex items-start gap-3">
                <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
                  <Bot className="h-4 w-4 text-gray-600" />
                </div>
                <div className="bg-gray-100 text-gray-900 p-3 rounded-lg rounded-tl-none text-sm">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input Area */}
          <div className="p-4 border-t bg-gray-50 flex-shrink-0">
            {isListening && (
              <div className="mb-2 flex items-center justify-center gap-2">
                <div className="flex items-center gap-1">
                  {[...Array(4)].map((_, i) => (
                    <div
                      key={i}
                      className={`w-1 bg-red-500 rounded-full transition-all duration-200 ${
                        audioWave === i ? 'h-6' : 'h-2'
                      }`}
                    />
                  ))}
                </div>
                <span className="text-red-600 text-sm font-medium">Listening...</span>
              </div>
            )}
            
            <div className="flex gap-2">
              <Input
                placeholder={`Ask in ${currentLanguage.name}...`}
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                className="flex-1"
                disabled={isTyping}
              />
              <Button
                size="sm"
                onClick={handleSendMessage}
                className="bg-blue-600 hover:bg-blue-700"
                disabled={!inputMessage.trim() || isTyping}
              >
                <Send className="h-4 w-4" />
              </Button>
              <Button
                size="sm"
                variant="outline"
                onClick={isListening ? stopVoiceRecognition : startVoiceRecognition}
                disabled={!recognitionRef.current || isTyping}
                className={isListening ? 'bg-red-50 border-red-200' : ''}
              >
                {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VoiceChatbot;
